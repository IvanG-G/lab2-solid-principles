class SystemManager {

    NotificationManager notificationManager;
    Repository repository;
    VerifierInventory verifierInventory;

    processOrder(Order order) {
        verifierInventory.verifyInventory(order);
        order.processPayment();
        repository.updateOrderStatus(order, "processed");
        notificationManager.notifyCustomer(order);
    }
}

interface Order{
    processPayment();
}

class StandardOrder implements Order{
    processPayment(){
        //Proccess the payment
        return true;
    }
}

class ExpressOrder implements Order{
    processPayment(){
        //Proccess the payment
        return true;
    }
}


interface VerifierInventory{
    verifyInventory(order);
}

class VerifierInventoryAdapter implements VerifierInventory{
    verifyInventory(order) {
        // Checks inventory levels
        if (inventory < order.quantity) {
            throw new Error("Out of stock");
        }
    }
}


interface Repository{
    updateOrderStatus(order, status);
}

class RepositoryAdapter implements Repository{
    updateOrderStatus(order, status) {
        // Updates the order status in the database
        database.updateOrderStatus(order.id, status);
    }
}

interface NotificationManager{
        notifyCustomer(order);
}

class EmailNotificationManager implements NotificationManager{
    notifyCustomer(order) {
        // Sends an email notification to the customer
        emailService.sendEmail(order.customerEmail, "Your order has been processed.");
    }
}

